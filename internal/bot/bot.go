package bot

import (
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	api *tgbotapi.BotAPI
	// Map to store conversation states
	conversationStates map[int64]string
}

func New(token string) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	return &Bot{
		api:                api,
		conversationStates: make(map[int64]string),
	}, nil
}

// analyzeMood analyzes the text and returns the detected mood
func analyzeMood(text string) string {
	text = strings.ToLower(text)

	// Positive mood indicators
	positiveWords := []string{
		"—Ä–∞–¥–æ—Å—Ç–Ω–æ", "–≤–µ—Å–µ–ª–æ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ", "—á—É–¥–µ—Å–Ω–æ",
		"–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ", "–ø–æ—Ç—Ä—è—Å–∞—é—â–µ", "–∏–∑—É–º–∏—Ç–µ–ª—å–Ω–æ", "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ",
		"–±–ª–µ—Å—Ç—è—â–µ", "–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ", "–∏–¥–µ–∞–ª—å–Ω–æ", "—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ",
		"–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å", "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å", "—á—É–¥–µ—Å–Ω—ã–π –¥–µ–Ω—å",
		"–≤ –≤–æ—Å—Ç–æ—Ä–≥–µ", "–≤ –≤–æ—Å—Ö–∏—â–µ–Ω–∏–∏", "–≤ —ç–π—Ñ–æ—Ä–∏–∏",
		"–Ω–∞ —Å–µ–¥—å–º–æ–º –Ω–µ–±–µ", "–Ω–∞ –≤–µ—Ä—à–∏–Ω–µ —Å—á–∞—Å—Ç—å—è", "–ø–æ–ª–æ–Ω —Ä–∞–¥–æ—Å—Ç–∏",
		"–ø–æ–ª–Ω–∞ —Ä–∞–¥–æ—Å—Ç–∏", "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π", "—Å—á–∞—Å—Ç–ª–∏–≤–∞—è",
		"–¥–æ–≤–æ–ª–µ–Ω", "–¥–æ–≤–æ–ª—å–Ω–∞", "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω", "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∞",
		"–≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏", "–≤ –æ—Ç–ª–∏—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
		"–≤ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏", "–≤ —á—É–¥–µ—Å–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
		"–≤ –≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏", "–≤ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
	}

	// Negative mood indicators
	negativeWords := []string{
		"–≥—Ä—É—Å—Ç–Ω–æ", "–ø–µ—á–∞–ª—å–Ω–æ", "—Ç–æ—Å–∫–ª–∏–≤–æ", "–º—Ä–∞—á–Ω–æ", "—É–Ω—ã–ª–æ",
		"–¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ", "–ø–æ–¥–∞–≤–ª–µ–Ω–Ω–æ", "—Ä–∞–∑–±–∏—Ç–æ", "—Ä–∞–∑–±–∏—Ç–∞",
		"–æ–ø—É—Å—Ç–æ—à–µ–Ω", "–æ–ø—É—Å—Ç–æ—à–µ–Ω–∞", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∞",
		"–≤ –æ—Ç—á–∞—è–Ω–∏–∏", "–≤ —É–Ω—ã–Ω–∏–∏", "–≤ –¥–µ–ø—Ä–µ—Å—Å–∏–∏",
		"–≤ –ø–ª–æ—Ö–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏", "–≤ —É–∂–∞—Å–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
		"–≤ –æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏", "–≤ –º–µ—Ä–∑–∫–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
		"–≤ –ø–∞—Ä—à–∏–≤–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏", "–≤ —Å–∫–≤–µ—Ä–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
		"–≤ –¥—É—Ä–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏", "–≤ –≥–∞–¥–∫–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
		"–≤ –º–µ—Ä–∑–æ–ø–∞–∫–æ—Å—Ç–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏", "–≤ –æ—Ç–≤—Ä–∞—Ç–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
		"–≤ —É–∂–∞—Å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", "–≤ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
		"–≤ –æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", "–≤ –º–µ—Ä–∑–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
		"–≤ –ø–∞—Ä—à–∏–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", "–≤ —Å–∫–≤–µ—Ä–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
		"–≤ –¥—É—Ä–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", "–≤ –≥–∞–¥–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
		"–≤ –º–µ—Ä–∑–æ–ø–∞–∫–æ—Å—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", "–≤ –æ—Ç–≤—Ä–∞—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
	}

	// Tired state indicators
	tiredWords := []string{
		"—É—Å—Ç–∞–ª", "—É—Å—Ç–∞–ª–∞", "—É—Ç–æ–º–ª–µ–Ω", "—É—Ç–æ–º–ª–µ–Ω–∞",
		"–Ω–µ—Ç —Å–∏–ª", "–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏", "—É–ø–∞–¥–æ–∫ —Å–∏–ª",
		"—Ö–æ—á—É —Å–ø–∞—Ç—å", "—Å–æ–Ω–Ω—ã–π", "—Å–æ–Ω–Ω–∞—è",
		"–≤—ã–º–æ—Ç–∞–Ω", "–≤—ã–º–æ—Ç–∞–Ω–∞", "–∏–∑–º–æ—Ç–∞–Ω", "–∏–∑–º–æ—Ç–∞–Ω–∞",
		"–Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", "—É—Å—Ç–∞–ª–æ—Å—Ç—å", "—É—Ç–æ–º–ª–µ–Ω–∏–µ",
		"—Ö–æ—á—É –æ—Ç–¥–æ—Ö–Ω—É—Ç—å", "–Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö", "–Ω—É–∂–µ–Ω —Å–æ–Ω",
		"–∏–∑–Ω—É—Ä–µ–Ω", "–∏–∑–Ω—É—Ä–µ–Ω–∞", "–∏—Å—Ç–æ—â–µ–Ω", "–∏—Å—Ç–æ—â–µ–Ω–∞",
		"–Ω–µ—Ç –±–æ–¥—Ä–æ—Å—Ç–∏", "–≤—è–ª—ã–π", "–≤—è–ª–∞—è",
	}

	// Energized state indicators
	energizedWords := []string{
		"—ç–Ω–µ—Ä–≥–∏—á–Ω", "–±–æ–¥—Ä", "–±–æ–¥—Ä–∞", "–ø–æ–ª–æ–Ω —Å–∏–ª", "–ø–æ–ª–Ω–∞ —Å–∏–ª",
		"–≥–æ—Ç–æ–≤", "–≥–æ—Ç–æ–≤–∞", "–≤—Å–µ –º–æ–≥—É", "–≤—Å–µ —Å–º–æ–≥—É",
		"–æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
		"–ø–æ–ª–æ–Ω —ç–Ω–µ—Ä–≥–∏–∏", "–ø–æ–ª–Ω–∞ —ç–Ω–µ—Ä–≥–∏–∏", "–º–Ω–æ–≥–æ —ç–Ω–µ—Ä–≥–∏–∏",
		"–∞–∫—Ç–∏–≤–µ–Ω", "–∞–∫—Ç–∏–≤–Ω–∞", "–±–æ–¥—Ä–æ—Å—Ç—å", "—ç–Ω–µ—Ä–≥–∏—è",
		"–≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "–≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ",
		"–≤—Å–µ –ø–æ –ø–ª–µ—á—É", "–≤—Å–µ –ø–æ–¥ —Å–∏–ª—É",
		"–æ—Ç–ª–∏—á–Ω–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ",
		"–ø–æ–ª–æ–Ω —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞", "–ø–æ–ª–Ω–∞ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞",
	}

	// Check for energized words first
	for _, word := range energizedWords {
		if strings.Contains(text, word) {
			return "energized"
		}
	}

	// Then check for tired words
	for _, word := range tiredWords {
		if strings.Contains(text, word) {
			return "tired"
		}
	}

	// Then check for positive words
	for _, word := range positiveWords {
		if strings.Contains(text, word) {
			return "positive"
		}
	}

	// Finally check for negative words
	for _, word := range negativeWords {
		if strings.Contains(text, word) {
			return "negative"
		}
	}

	return "neutral"
}

func (b *Bot) Run() error {
	log.Printf("Authorized on account %s", b.api.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		// Handle callback queries (button presses)
		if update.CallbackQuery != nil {
			callback := update.CallbackQuery
			chatID := callback.Message.Chat.ID

			var response string
			switch callback.Data {
			case "exercise1":
				response = "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1: –ì–ª—É–±–æ–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ\n\n" +
					"1. –°—è–¥—å—Ç–µ —É–¥–æ–±–Ω–æ –∏ —Ä–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å\n" +
					"2. –°–¥–µ–ª–∞–π—Ç–µ –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö —á–µ—Ä–µ–∑ –Ω–æ—Å –Ω–∞ 4 —Å—á–µ—Ç–∞\n" +
					"3. –ó–∞–¥–µ—Ä–∂–∏—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ –Ω–∞ 4 —Å—á–µ—Ç–∞\n" +
					"4. –ú–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–¥–æ—Ö–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ —Ä–æ—Ç –Ω–∞ 4 —Å—á–µ—Ç–∞\n" +
					"5. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ 5-7 —Ä–∞–∑\n\n" +
					"–≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —Å–Ω—è—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é."
			case "exercise2":
				response = "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2: –†–∞—Å—Ç—è–∂–∫–∞ —à–µ–∏\n\n" +
					"1. –°—è–¥—å—Ç–µ –ø—Ä—è–º–æ\n" +
					"2. –ú–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞–∫–ª–æ–Ω–∏—Ç–µ –≥–æ–ª–æ–≤—É –≤–ø—Ä–∞–≤–æ, –∑–∞–¥–µ—Ä–∂–∏—Ç–µ—Å—å –Ω–∞ 10 —Å–µ–∫—É–Ω–¥\n" +
					"3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ\n" +
					"4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–ª–µ–≤–æ\n" +
					"5. –°–¥–µ–ª–∞–π—Ç–µ –ø–æ 3-4 —Ä–∞–∑–∞ –≤ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É\n\n" +
					"–≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —Å–Ω—è—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ —à–µ–µ –∏ –ø–ª–µ—á–∞—Ö."
			case "exercise3":
				response = "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3: –ú–∏–Ω–∏-–ø—Ä–æ–≥—É–ª–∫–∞\n\n" +
					"1. –í—Å—Ç–∞–Ω—å—Ç–µ –∏ –ø—Ä–æ–π–¥–∏—Ç–µ—Å—å –ø–æ –∫–æ–º–Ω–∞—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã\n" +
					"2. –î–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤ —Å–ø–æ–∫–æ–π–Ω–æ–º —Ç–µ–º–ø–µ\n" +
					"3. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –¥—ã—Ö–∞–Ω–∏–µ–º\n" +
					"4. –ú–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å\n\n" +
					"–≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–≥–Ω–∞—Ç—å –∫—Ä–æ–≤—å –∏ –≤–∑–±–æ–¥—Ä–∏—Ç—å—Å—è."
			case "exercise4":
				response = "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 4: –ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞ –¥–ª—è –≥–ª–∞–∑\n\n" +
					"1. –ó–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥\n" +
					"2. –û—Ç–∫—Ä–æ–π—Ç–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–¥–∞–ª—å 10 —Å–µ–∫—É–Ω–¥\n" +
					"3. –°–¥–µ–ª–∞–π—Ç–µ –∫—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –≥–ª–∞–∑–∞–º–∏ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ\n" +
					"4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏\n" +
					"5. –°–¥–µ–ª–∞–π—Ç–µ 3-4 –ø–æ–¥—Ö–æ–¥–∞\n\n" +
					"–≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —Å–Ω—è—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ —Å –≥–ª–∞–∑ –∏ —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é."
			}

			msg := tgbotapi.NewMessage(chatID, response)
			if _, err := b.api.Send(msg); err != nil {
				log.Printf("Error sending message: %v", err)
			}

			// Answer callback query to remove loading state
			callbackConfig := tgbotapi.NewCallback(callback.ID, "")
			if _, err := b.api.Request(callbackConfig); err != nil {
				log.Printf("Error answering callback query: %v", err)
			}

			continue
		}

		if update.Message == nil {
			continue
		}

		if !update.Message.IsCommand() {
			text := strings.ToLower(update.Message.Text)
			chatID := update.Message.Chat.ID
			state := b.conversationStates[chatID]

			switch {
			case strings.Contains(text, "–ø—Ä–∏–≤–µ—Ç") && state == "":
				// Send greeting
				msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! üëã")
				if _, err := b.api.Send(msg); err != nil {
					log.Printf("Error sending message: %v", err)
				}

				// Ask how are you
				howAreYouMsg := tgbotapi.NewMessage(chatID, "–ö–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å?")
				if _, err := b.api.Send(howAreYouMsg); err != nil {
					log.Printf("Error sending message: %v", err)
				}

				b.conversationStates[chatID] = "waiting_for_mood"

			case state == "waiting_for_mood":
				mood := analyzeMood(text)
				var response string

				switch mood {
				case "energized":
					response = "–û—Ç–ª–∏—á–Ω–æ! üí™ –¢–∞–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è - —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ! –î–µ—Ä–∂–∏ —ç—Ç–æ—Ç –Ω–∞—Å—Ç—Ä–æ–π –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π!"
					msg := tgbotapi.NewMessage(chatID, response)
					if _, err := b.api.Send(msg); err != nil {
						log.Printf("Error sending message: %v", err)
					}
					delete(b.conversationStates, chatID)

				case "tired":
					response = "–°–æ–∂–∞–ª–µ—é, —á—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å —É—Å—Ç–∞–ª. –î–∞–≤–∞–π —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ 4 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è."
					msg := tgbotapi.NewMessage(chatID, response)

					// Create keyboard with exercise buttons
					var keyboard = tgbotapi.NewInlineKeyboardMarkup(
						tgbotapi.NewInlineKeyboardRow(
							tgbotapi.NewInlineKeyboardButtonData("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1", "exercise1"),
							tgbotapi.NewInlineKeyboardButtonData("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2", "exercise2"),
						),
						tgbotapi.NewInlineKeyboardRow(
							tgbotapi.NewInlineKeyboardButtonData("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3", "exercise3"),
							tgbotapi.NewInlineKeyboardButtonData("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 4", "exercise4"),
						),
					)

					msg.ReplyMarkup = keyboard
					if _, err := b.api.Send(msg); err != nil {
						log.Printf("Error sending message: %v", err)
					}
					b.conversationStates[chatID] = "waiting_for_exercise"

				case "positive":
					response = "–†–∞–¥ —Å–ª—ã—à–∞—Ç—å, —á—Ç–æ —É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ! üòä –î–∞–≤–∞–π —Å–æ—Ö—Ä–∞–Ω–∏–º —ç—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!"
					msg := tgbotapi.NewMessage(chatID, response)
					if _, err := b.api.Send(msg); err != nil {
						log.Printf("Error sending message: %v", err)
					}
					delete(b.conversationStates, chatID)

				case "negative":
					response = "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–µ –ª—É—á—à–∏–π –º–æ–º–µ–Ω—Ç. üåü –ù–∞–¥–µ—é—Å—å, —Å–∫–æ—Ä–æ –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è! –ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ –¥–ª—è —Å–µ–±—è?"
					msg := tgbotapi.NewMessage(chatID, response)
					if _, err := b.api.Send(msg); err != nil {
						log.Printf("Error sending message: %v", err)
					}
					delete(b.conversationStates, chatID)

				default:
					response = "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å! üåû"
					msg := tgbotapi.NewMessage(chatID, response)
					if _, err := b.api.Send(msg); err != nil {
						log.Printf("Error sending message: %v", err)
					}
					delete(b.conversationStates, chatID)
				}
			}
		}
	}

	return nil
}
